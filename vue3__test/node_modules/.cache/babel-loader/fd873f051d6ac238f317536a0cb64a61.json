{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"信息\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"h2\", null, \"姓名\" + _toDisplayString($setup.person.name), 1\n  /* TEXT */\n  ), _createElementVNode(\"h2\", null, \"年龄\" + _toDisplayString($setup.person.age), 1\n  /* TEXT */\n  ), _createElementVNode(\"h3\", null, \"工作种类:\" + _toDisplayString($setup.person.job.type), 1\n  /* TEXT */\n  ), _createElementVNode(\"h3\", null, \"工作薪水:\" + _toDisplayString($setup.person.job.salary), 1\n  /* TEXT */\n  ), _createElementVNode(\"h3\", null, \"爱好:\" + _toDisplayString($setup.person.hobby), 1\n  /* TEXT */\n  ), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.changeInfo && $setup.changeInfo(...args))\n  }, \"修改信息\")], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;gCACEA,oBAAW,IAAX,EAAW,IAAX,EAAI,IAAJ,EAAM;AAAA;AAAN;;;6DAAAC,YACAD,oBAA4B,IAA5B,EAA4B,IAA5B,EAAI,OAAEE,iBAAGC,cAAOC,IAAV,CAAN,EAAoB;EAAA;EAApB,GACAJ,oBAA2B,IAA3B,EAA2B,IAA3B,EAAI,OAAEE,iBAAGC,cAAOE,GAAV,CAAN,EAAmB;EAAA;EAAnB,GACAL,oBAAmC,IAAnC,EAAmC,IAAnC,EAAI,UAAKE,iBAAGC,cAAOG,GAAP,CAAWC,IAAd,CAAT,EAA2B;EAAA;EAA3B,GACAP,oBAAqC,IAArC,EAAqC,IAArC,EAAI,UAAKE,iBAAGC,cAAOG,GAAP,CAAWE,MAAd,CAAT,EAA6B;EAAA;EAA7B,GACAR,oBAA8B,IAA9B,EAA8B,IAA9B,EAAI,QAAGE,iBAAGC,cAAOM,KAAV,CAAP,EAAsB;EAAA;EAAtB,GACAT,oBAAyC,QAAzC,EAAyC;IAAhCU,OAAK,yCAAEP,+CAAF;EAA2B,CAAzC,EAA4B,MAA5B","names":["_createElementVNode","_hoisted_1","_toDisplayString","$setup","name","age","job","type","salary","hobby","onClick"],"sourceRoot":"","sources":["D:\\尚硅谷-vue\\vue3_test\\src\\App.vue"],"sourcesContent":["<template>\n  <h1>信息</h1>\n  <h2>姓名{{ person.name }}</h2>\n  <h2>年龄{{ person.age }}</h2>\n  <h3>工作种类:{{ person.job.type }}</h3>\n  <h3>工作薪水:{{ person.job.salary }}</h3>\n  <h3>爱好:{{ person.hobby }}</h3>\n  <button @click=\"changeInfo\">修改信息</button>\n</template>\n\n<script>\nimport { reactive } from \"vue\";\nexport default {\n  name: \"App\",\n  setup() {\n    // 数据  ref 把普通数据变成响应式的引用对象(RefImpl)\n    // ref 处理基本数据用的getter,setter(Object.defineProperty),\n    // 处理对象转化为Proxy(封装在reactive)\n    /*  let name = ref(\"sqy\");\n    let age = ref(18);\n    // reactive 只能用于对象和数组类型,直接把对象变成Proxy类型\n    let job = reactive({\n      type: \"student\",\n      salary: \"10k\",\n    });\n    let hobby = reactive(['dance','sing','dream']) */\n\n    // 数据\n    let person = reactive({\n      name: \"sqy\",\n      age: 18,\n      job: {\n        type: \"student\",\n        salary: \"10k\",\n      },\n      hobby: [\"dance\", \"sing\", \"dream\"],\n    });\n    // 方法\n    function changeInfo() {\n      // ref 生成了一个引用对象,用value访问值,在模板中不要用.value,vue会自动做\n      person.name = \"qys\";\n      person.age = 88;\n      // 对象中内部也配置了响应式,但是不需要.value\n      person.job.type = \"clerk\";\n      person.job.salary = \"28k\";\n      // vue3中可以直接修改,vue2需要Vue.$set\n      person.hobby[0] = \"hello\";\n    }\n    return {\n      person,\n      changeInfo,\n    };\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}