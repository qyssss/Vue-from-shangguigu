{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"h2\", null, \"姓名：\" + _toDisplayString($setup.name), 1\n  /* TEXT */\n  ), _createElementVNode(\"h2\", null, \"年龄：\" + _toDisplayString($setup.age), 1\n  /* TEXT */\n  ), _createElementVNode(\"h2\", null, \"薪水:\" + _toDisplayString($setup.salary), 1\n  /* TEXT */\n  ), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $setup.name += '!')\n  }, \"修改姓名\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.age++)\n  }, \"修改年龄\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $setup.salary++)\n  }, \"薪资++\")], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;6DACEA,oBAAsB,IAAtB,EAAsB,IAAtB,EAAI,QAAGC,iBAAGC,WAAH,CAAP,EAAc;EAAA;EAAd,GACAF,oBAAqB,IAArB,EAAqB,IAArB,EAAI,QAAGC,iBAAGC,UAAH,CAAP,EAAa;EAAA;EAAb,GACAF,oBAAwB,IAAxB,EAAwB,IAAxB,EAAI,QAAGC,iBAAGC,aAAH,CAAP,EAAgB;EAAA;EAAhB,GACAF,oBAA0C,QAA1C,EAA0C;IAAjCG,OAAK,sCAAED,eAAI,GAAN;EAA4B,CAA1C,EAA6B,MAA7B,GACAF,oBAAoC,QAApC,EAAoC;IAA3BG,OAAK,sCAAED,YAAF;EAAsB,CAApC,EAAuB,MAAvB,GACAF,oBAAuC,QAAvC,EAAuC;IAA9BG,OAAK,sCAAED,eAAF;EAAyB,CAAvC,EAA0B,MAA1B","names":["_createElementVNode","_toDisplayString","$setup","onClick"],"sourceRoot":"","sources":["D:\\尚硅谷-vue\\vue3__test\\src\\components\\Demo.vue"],"sourcesContent":["<template>\r\n  <h2>姓名：{{ name }}</h2>\r\n  <h2>年龄：{{ age }}</h2>\r\n  <h2>薪水:{{ salary }}</h2>\r\n  <button @click=\"name += '!'\">修改姓名</button>\r\n  <button @click=\"age++\">修改年龄</button>\r\n  <button @click=\"salary++\">薪资++</button>\r\n</template>\r\n\r\n<script>\r\nimport { toRef, reactive } from \"vue\";\r\nexport default {\r\n  name: \"Demo\",\r\n  setup() {\r\n    // 数据\r\n    let person = reactive({\r\n      name: \"qys\",\r\n      age: 14,\r\n      job: {\r\n        j1: {\r\n          salary: \"2133\",\r\n        },\r\n      },\r\n    });\r\n    const name1 = person.name;\r\n    console.log(name1);\r\n    const name2 = toRef(person, \"name\");\r\n    console.log(name2);\r\n    // toRef 第一个参数传对象即可,可以返回一个Ref对象\r\n    // 如果直接用 name:ref(person.name),如果修改改的并不是原来的person的属性\r\n    return {\r\n      name: toRef(person, \"name\"),\r\n      salary: toRef(person.job.j1, \"salary\"),\r\n      age: toRef(person, \"age\"),\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n#app {\r\n  font-family: Avenir, Helvetica, Arial, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  text-align: center;\r\n  color: #2c3e50;\r\n  margin-top: 60px;\r\n}\r\n</style>\r\n\r\n"]},"metadata":{},"sourceType":"module"}