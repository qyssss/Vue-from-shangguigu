{"ast":null,"code":"import { reactive, toRef, toRefs } from \"vue\";\nexport default {\n  name: \"Demo\",\n\n  setup() {\n    // 数据\n    let person = reactive({\n      name: \"qys\",\n      age: 14,\n      job: {\n        j1: {\n          salary: \"2133\"\n        }\n      }\n    });\n    /*  const name1 = person.name;\r\n    console.log(name1);\r\n    const name2 = toRef(person, \"name\");\r\n    console.log(name2); */\n    // 直接把对象里的所有属性都变成 ref\n    // const x = toRefs(person);\n    // toRef 第一个参数传对象即可,可以返回一个Ref对象,是一个引用的效果,不是复制\n    // 如果直接用 name:ref(person.name),如果修改改的并不是原来的person的属性,因为是创建了新的ref\n\n    return {\n      /* name: toRef(person, \"name\"),\r\n      salary: toRef(person.job.j1, \"salary\"),\r\n      age: toRef(person, \"age\"), */\n      name: x.name,\n      age: x.age\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAUA,SAASA,QAAT,EAAmBC,KAAnB,EAA0BC,MAA1B,QAAwC,KAAxC;AACA,eAAe;EACbC,IAAI,EAAE,MADO;;EAEbC,KAAK,GAAG;IACN;IACA,IAAIC,MAAK,GAAIL,QAAQ,CAAC;MACpBG,IAAI,EAAE,KADc;MAEpBG,GAAG,EAAE,EAFe;MAGpBC,GAAG,EAAE;QACHC,EAAE,EAAE;UACFC,MAAM,EAAE;QADN;MADD;IAHe,CAAD,CAArB;IASA;;;;IAKA;IACA;IAEA;IACA;;IACA,OAAO;MACL;;;MAGAN,IAAI,EAAEO,CAAC,CAACP,IAJH;MAKLG,GAAG,EAACI,CAAC,CAACJ;IALD,CAAP;EAOD;;AA9BY,CAAf","names":["reactive","toRef","toRefs","name","setup","person","age","job","j1","salary","x"],"sourceRoot":"","sources":["D:\\尚硅谷-vue\\vue3__test\\src\\components\\Demo.vue"],"sourcesContent":["<template>\r\n  <h2>姓名：{{ name }}</h2>\r\n  <h2>年龄：{{ age }}</h2>\r\n  <h2>薪水:{{ salary }}</h2>\r\n  <button @click=\"name += '!'\">修改姓名</button>\r\n  <button @click=\"age++\">修改年龄</button>\r\n  <button @click=\"salary++\">薪资++</button>\r\n</template>\r\n\r\n<script>\r\nimport { reactive, toRef, toRefs } from \"vue\";\r\nexport default {\r\n  name: \"Demo\",\r\n  setup() {\r\n    // 数据\r\n    let person = reactive({\r\n      name: \"qys\",\r\n      age: 14,\r\n      job: {\r\n        j1: {\r\n          salary: \"2133\",\r\n        },\r\n      },\r\n    });\r\n    /*  const name1 = person.name;\r\n    console.log(name1);\r\n    const name2 = toRef(person, \"name\");\r\n    console.log(name2); */\r\n\r\n    // 直接把对象里的所有属性都变成 ref\r\n    // const x = toRefs(person);\r\n    \r\n    // toRef 第一个参数传对象即可,可以返回一个Ref对象,是一个引用的效果,不是复制\r\n    // 如果直接用 name:ref(person.name),如果修改改的并不是原来的person的属性,因为是创建了新的ref\r\n    return {\r\n      /* name: toRef(person, \"name\"),\r\n      salary: toRef(person.job.j1, \"salary\"),\r\n      age: toRef(person, \"age\"), */\r\n      name: x.name,\r\n      age:x.age,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n#app {\r\n  font-family: Avenir, Helvetica, Arial, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  text-align: center;\r\n  color: #2c3e50;\r\n  margin-top: 60px;\r\n}\r\n</style>\r\n\r\n"]},"metadata":{},"sourceType":"module"}